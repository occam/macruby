For 0.5 RC1:

[X] fix irb Binding bugs
[/] sockets
[/] backtracing / symbolication
[/] rubygems should work (modulo C extensions)
  [X] fix version numbers
  [X] fix YAML deserialization of booleans
  [X] fix ~/.gemrc
  [X] `source --add http://gems.github.com' crashes (outside gdb)
  [X] `install rest-client' prints parsing errors (encoding problem in thor.gemspec)
  [X] `gem uninstall bacon' doesn't work (Unknown gem bacon >= 0)
  [X] `macgem install rails --version 2.3.2' crashes (MAX_DISPATCH_ARGS assertion)
  [X] `macgem help commands' crashes
[X] rewrite load.c (needed for RubyGems' #require hack)

For 0.5 (must do):

[ ] implement Enumerable::Enumerator
[/] 32-bit should be back
[X] Array subclass for immediates
[ ] Hash subclass for immediates
[ ] try/catch should use a C++ exception
[ ] remaining Cocoa bugs
  [ ] ObjC exceptions should be catchable in Ruby
  [ ] honor BridgeSupport sel_of_type attribute
  [ ] honor BridgeSupport printf_format attribute
  [X] add support for variadic functions / methods
[ ] support for bigdecimal
[ ] support for json
[/] support for yaml
[ ] support for openssl
[/] support for zlib
[/] support for Mocha (grep -R 'Mocha TODO' test_vm)
[ ] merge stdlib from 1.9.2 trunk
[/] most language/core/library specs should run (modulo a very few exceptions)
[ ] add the DTrace custom probes
[X] port all rb_define_method() calls to rb_objc_define_method()
[/] port all rb_funcall() calls to rb_vm_call()
[/] port all rb_num_coerce_bin() calls to rb_objc_num_coerce_bin()
[/] port all rb_obj_respond_to() calls to rb_vm_respond_to()
[X] refresh copyright headers for 2009
[ ] rdoc should work
[X] MacRuby should not ignore SIGINT and other signals
[ ] implement autoload

For 0.5 (tentative):

[ ] write a pass manager to eliminate unnecessary arrays generated by massigns
[ ] vectorize bignums
[ ] block inlining
[ ] fast regexp =~
[ ] rakefile-ize instruby.rb
[/] finish AOT compiler (only normal mode)
[X] sync with LLVM 2.6/ToT
[ ] multithreaded JIT
[ ] debugger interface
[ ] fully implement FFI API

For 0.6:

[ ] add support for encodings in strings

Porting from rb_define_method() to rb_objc_define_method():

  Replace calls to rb_define_method() with a call to
  rb_objc_define_method() and rewrite the function to 
  conform to the following signatures:

  // if arity -2
  VALUE foo(VALUE recv, SEL sel, VALUE args);

  // if arity -1
  VALUE foo(VALUE recv, SEL sel, int argc, VALUE *argv);

  // if arity 0
  VALUE foo(VALUE recv, SEL sel);

  // if arity 1
  VALUE foo(VALUE recv, SEL sel, VALUE arg1);

  // if arity 2
  VALUE foo(VALUE recv, SEL sel, VALUE arg1, VALUE arg2);

  // etc.

  In the case of rb_define_global_function(), replace it with
  rb_objc_define_method(rb_mKernel, ...)

  In the case of rb_define_singleton_method() for defining class
  functions and module-level functions, replace it with
  rb_objc_define_method(*(VALUE *)klass, ...)

  In the case of rb_define_singleton_method() for defining methods on 
  individual instances of objects, replace it with
  rb_objc_define_method(rb_singleton_class(obj), ...)

  In the case of rb_define_module_function(), replace it with
  rb_objc_define_module_function()

  In the case of rb_define_alloc_func(), replace it with
  rb_objc_define_method(*(VALUE *)klass, "alloc", ..., 0)
